<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cxf="http://cxf.apache.org/core"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-3.1.xsd
						http://www.springframework.org/schema/jdbc 
						http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
						http://www.springframework.org/schema/security 
						http://www.springframework.org/schema/security/spring-security-3.1.xsd
						http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
       		            http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">

	<context:component-scan base-package="br.com.financeiro"/>

	<security:http auto-config="true" >		
		<security:intercept-url pattern="/login.jsf" />
		<security:intercept-url pattern="/pages/**"	 access="ROLE_USER" />		
		<security:form-login 	login-page="/login.jsf"	default-target-url="/pages/index.jsf" authentication-failure-url="/login.jsf?error=true" />
		<security:logout logout-success-url="/login.jsf"/>
	</security:http>	
	
	<security:authentication-manager>
		<security:authentication-provider>			
			<security:jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="SELECT login, password, enable FROM usuario WHERE login=?"
				authorities-by-username-query="SELECT u.login, pa.descricao FROM permissao pe, papel pa, usuario u 
   				 WHERE u.id_usuario = pe.id_usuario and pe.id_papel = pa.id_papel and u.login=?" /> 
		</security:authentication-provider>	
		
	</security:authentication-manager>
	
	<security:global-method-security secured-annotations="enabled" />
	
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource" >
		<property name="basenames">
		<list>
		<value>messages</value>
		</list>
		</property>
	</bean>

<!--********************************************************************************-->
<!--CONEXAO COM BANCO-->
<!--*******************************************************************************-->
<bean id = "dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        
            <property name="driverClassName" value="org.postgresql.Driver"/>
            <property name="url" value="jdbc:postgresql://localhost:5432/FinanceiroWeb"/>
            <property name="username" value="aluno"/>
            <property name="password" value="123"/>  
        
</bean>

<!--*********************************************************************************************-->
<!--ANOTACACAO 2: bean para tornar o session factory automatico, sem precisar criar na mao -->
<!--**********************************************************************************************-->
<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
           
           <property name="dataSource" ref="dataSource"/>
           <property name="packagesToScan" value="br.com.financeiro.dominio"/>           
           
           <property name="hibernateProperties">
               <props>
<!--           <prop key="hibernate.hbm2ddl.auto">create</prop>  -->
                   <prop key="hibernate.show_sql">true</prop>
                   <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
                   
               </props>
            </property>
           
</bean>

<!--***************************************************************************************************-->
<!--ANOTACACAO 3: bean para tornar tudo mais fácil, usando templates do spring, facilita o código -->
<!--***************************************************************************************************-->
<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
               <property name="sessionFactory" ref="sessionFactory">
                   
                </property>   
               
</bean>

<!--*****************************************************************************************-->
<!--ANOTACACAO 4: bean para tornar os metodos transacionais -->
<!--*****************************************************************************************-->
<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>

<!-- ANOTACACAO 5: Habilita o @Transacional  -->
<!-- <tx:annotation-driven/> -->


<!-- ANOTACACAO 6: serviços web service -->

<!-- <jaxws:endpoint id="saldoService" implementor="#saldoRemoteServiceImpl"  address="/saldoRemoteService"  /> -->
<!-- <jaxws:endpoint id="fluxoDeCaixaService" implementor="#fluxoDeCaixaRemoteServiceImpl"  address="/fluxoDeCaixaRemoteService"/> -->


</beans>
